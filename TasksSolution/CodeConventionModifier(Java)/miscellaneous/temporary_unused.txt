'''
    MAX_COMMENT_LINE_LEN = 80
    def try_comment(self, text):
        if len(text) < 4: return False

        if text.startswith('/*'): term = '*/'
        elif text.startswith('//'): term = '\n'
        else: return False

        if not text.endswith(term): return False
        lines = [x.strip() for x in text.split('\n')]
        wrong
        asteriks_first = any(x.startswith('*') for x in lines)
        lines = [x.lstrip('*') for x in lines]

        words = (l.split(' ') for l in lines)


    def __init__(self):
        self._authors = None    # @author (classes and interfaces only, required)
        self_versions = None    # @version (classes and interfaces only, required)
        self._see = None
        self._params = None     # @param (methods and constructors only)
        self._return = None     # @return (methods only)
        self._throws = None     # @throws | @exception
        self._since = None      
        self._serials = None    # @serial (or @serialField or @serialData)
        self._deprecated = None


'''
class ConventionConsumer:
    def __init__(self):
        self.consume_res = None

    def try_java_doc(self, text : str):
        if not (text.startswith('/**') or text.endswith('*/')): return False

        idx, end = 3, len(text)-2
        state = 1
        while idx < end:
            next_state = None

            if state == 1:
                if text[idx] == '\n': next_state = 2
                else: next_state = 1

            elif state == 2:
                if text[idx].isspace(): next_state = 2
                elif text[idx] == '@': next_state = 3
                else: next_state = 1

            elif state == 3:
                if text.startswith('see', idx):
                    pass

                elif text.startswith('param', idx):
                    idx += 5
                    while idx < end and text[idx].isspace():
                        idx += 1
                    while idx <

                elif text.startswith('return', idx):
                    pass

                elif text.startswith('throws', idx) or text.startswith('exception', idx):
                    pass

                elif text.startswith('serial', idx):
                    pass

            if text.startswith('@see', idx): pass
            elif text.startswith('@param', idx): pass

'''
'''
